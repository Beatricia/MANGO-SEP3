@page "/CreateOffer/{FarmName}"
@attribute [Authorize(Roles = "farmer")] 

@using global::Shared.DTOs
@inject IOfferService httpClient
@using HttpClient.ClientInterfaces
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<h3>CreateOffer</h3>
<div class="form d-flex flex-wrap flex-column">
    <div style="color: red">@errorMessage</div>
    <div class="col-6">
        <label>Product Name <span class="required">*</span></label>
        <input type="text" @bind="productName" required="required"/>
    </div>
    <!--image-->
    <div class="col-3 d-flex justify-content-end" style="position: absolute; right: 0">
        <div class=" d-flex flex-column">
            <img id="image" src="Img/sample-offer.png" alt="default" width="200px" height="auto" class="img col-3 me-4"/>
            @*<input type="file" id="offerImg" accept="image/png, image/jpeg, image/jpg" class="col-3 me-4"/>*@
            <InputFile OnChange="GetImage"></InputFile>
        </div>
    </div>
    <div class="col-6">
        <label>Quantity <span class="required">*</span></label>
        <input type="text" @bind="quantity" required="required"/>
        <div class="col-9 d-flex flex-nowrap">
            <!--dropdown menu-->
            <div class="dropdown col-2 ms-1">
                @{
                    var list = new List<string> { "kilogram", "gram", "liter","milliliter", "piece", "bag", "box", "jar" };
                }
                <select @onchange="((evenArgs) => SetUnit((string)evenArgs.Value))">
                    @foreach (var item in list)
                    {
                        <option @onclick="(() => SetUnit(item))">@item</option>
                    }
                    </select>
            </div>
        </div>
    </div>
    
    <div class="col-6">
        <label>Price <span class="required">*</span></label>
        <input type="text" @bind="price" required="required"/>
    </div>

    <!--radio buttons for delivery option-->
    <label class="col-6">Delivery Option:</label>
    <label class="container">Delivery
      <input type="checkbox" @bind="delivery">
      <span class="checkmark"></span>
    </label>
    <label class="container" >Pick Your Own 
      <input type="checkbox"  @bind="pickYO">
      <span class="checkmark"></span>
    </label>
    <label class="container">Pick Up
        <input type="checkbox" @bind="pickUp">
      <span class="checkmark"></span>
    </label>
    
<!--textarea for description-->
    <label for="textarea">Description:</label>
    <textarea id="textarea" name="textarea" placeholder="Quality, Detailed Information ..." @bind="description"></textarea>

    <!--submit button-->
    <input type="submit" value="CREATE" class="button btn-success" onclick="@Create"/>
</div>

@code {
    [Parameter] 
    public string FarmName {get;set;}
    
    private string productName = "";
    private int quantity;
    private string unit = "kilogram";
    private double price;
    private bool delivery = true;
    private bool pickUp = true;
    private bool pickYO = true;
    private string description = "";
    private string displayDropdown = "none";
    private string errorMessage = "";

    private IBrowserFile? file;
    private string? blobUri;
    private Lazy<IJSObjectReference> ExampleModule = new();


    private async Task GetImage(InputFileChangeEventArgs args)
    {
        file = args.File;

        var dotnetImageStream = new DotNetStreamReference(file.OpenReadStream(15_000_000L));
        await JSRuntime.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }


    ///summary///
    /// calls methods ValidateData for data validation and CreateAsync from HttpClient
    /// summary///
    private async Task Create()
    {
        try
        {
            errorMessage = "";

            if (ValidateData())
            {
                return;
            }
            
            OfferCreationDto dto = new()
            {
                Name = productName,
                Quantity = quantity,
                Unit = unit,
                Price = price,
                Delivery = delivery,
                PickUp = pickUp,
                PickYourOwn = pickYO,
                Description = description,
                FarmName = FarmName
            };

            try
            {
                var offer = await httpClient.CreateAsync(dto);
                if (offer is not null)
                    await httpClient.UploadImageAsync(file, offer.Id);
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
            
            productName = "";
            quantity =0;
            price = 0;
            delivery = true;
            pickUp = true;
            pickYO = true;
            description = "";
            displayDropdown = "none";
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    ///summary///
    /// sets variable unit 
    /// summary///
    private void SetUnit(string unitToSet)
    {
        Console.WriteLine("The unit was set: " +unit);
        unit = unitToSet;
    }

    ///summary///
    /// displays or hides the drop down menu based on the current value 
    /// summary///
    private void DropDownVisible()
    {
        displayDropdown = displayDropdown.Equals("none") ? "block" : "none";
    }

    ///summary///
    /// validates inputted data
    /// summary///
    private bool ValidateData()
    {
          
        if (file is null)
        {
            errorMessage = "No image selected;";
            return true;
        }
        if (productName.Equals(""))
        {
            errorMessage = "Product name is required";
            return true;
        }
        if (quantity <= 0)
        {
            errorMessage = "Quantity must be greater than 0";
            return true;
        }
        if (price <= 0)
        {
            errorMessage = "Price must be greater than 0";
            return true;
        }
        if (!delivery && !pickUp && !pickYO)
        {
            errorMessage = "At least one delivery option must be selected";
            return true;
        }
        return false;
    }

    public async ValueTask DisposeAsync()
    {
        if(ExampleModule.IsValueCreated)
        {
            await ExampleModule.Value.DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ExampleModule = new(await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/CreateOffer.razor.js"));
    }

}