@page "/FarmerOrderView"
@attribute [Authorize(Roles = "farmer")] 

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject IOrderService orderService
@inject IUserService userService

    <div class="title">
        <h1 class="titleText">Orders</h1>
    </div>
    @if (orders == null)
    {
        <span>Loading..</span>
    }
    else if (orders.Count() == 0)
    {
        <span>You don't have any orders yet.</span>
    }
    else if (orders.Any())
    {
        @if (deliveryOrders.Any())
        {
            <div class="orders">
                <label>Delivery</label>
                <div class="ordersTable">
                    @foreach (var order in deliveryOrders)
                    {
                        <div class="rowDiv">
                            <div class="collectCell">
                                <button @onclick="()=>CollectOrder(order.Id)">
                                    <img class="imgTic" src="Img/tic.png"/>
                                </button>
                            </div>
                            <div class="customerNameCell">@order.Username</div>
                            <div class="cityCell"></div>
                            <div class="priceCell">@TotalPrice(order.OrderOffers) dkk</div>
                            <div class="deleteCell"><button class="btn btn-danger" onclick="@(async () => await DeleteOrder(order.Id))">DELETE</button></div>
                            <div class="imgCell" onclick="this.parentElement.classList.toggle('details')">
                                <img src="Img/downArrow.png">
                            </div>
                        </div>
                            <Table class="detailTable">
                            <th class="AddressRow">
                                @customers[order.Username].Address?.ToString()
                            </th>
                            @foreach (var item in order.OrderOffers)
                            {
                                <tr>
                                    <td>@item.Offer.Name</td>
                                    <td class="QuantityCell">@item.Quantity</td>
                                </tr>
                            }
                        </Table>
                        }
                </div>
            </div>
        }
        @if (pickUpOrders.Any())
        {
            <div class="orders">
                <label>Pick up</label>
                <div class="ordersTable">
                    @foreach (var order in pickUpOrders)
                    {
                        <div class="rowDiv">
                            <div class="collectCell">
                                <button @onclick="()=>CollectOrder(order.Id)">
                                    <img class="imgTic" src="Img/tic.png"/>
                                    </button>
                                </div>
                            <div class="nameCell">@order.Username</div>
                            <div class="phoneCell">@customers[order.Username].Phone</div>
                            <div class="priceCell">@TotalPrice(order.OrderOffers) dkk</div>
                            <div class="deleteCell"><button class="btn btn-danger" onclick="@(async () => await DeleteOrder(order.Id))">DELETE</button></div>
                            <div class="imgCell" onclick="this.parentElement.classList.toggle('details')">
                                <img src="Img/downArrow.png">
                            </div>
                        </div>
                        <Table class="detailTable">
                            <th></th>
                            @foreach (var item in order.OrderOffers)
                            {
                                <tr>
                                    <td>@item.Offer.Name</td>
                                    <td class="QuantityCell">@item.Quantity</td>
                                </tr>
                            }
                        </Table>
                    }
                </div>
            </div>
        }
    }



@code {
    private IEnumerable<Order>? orders;
    private List<Order> deliveryOrders = new();
    private List<Order> pickUpOrders = new();
    private string msg = "No input";
    private string username;
    private Dictionary<string,Customer> customers = new ();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var ordersToGet = await orderService.GetAllOrdersAsync();
            
            if (ordersToGet != null)
            {
                 foreach (var order in ordersToGet)
                 {
                     if (order.CollectionOption.Equals("delivery"))
                     {
                         deliveryOrders.Add(order);
                     }
                     else if(order.CollectionOption.Equals("pickUp"))
                     {
                         pickUpOrders.Add(order);
                     }
                 }
                
                List<string> customersUsername = new();
                
                foreach (var order in ordersToGet)
                {
                    customersUsername.Add(order.Username);
                    Console.WriteLine("Username: " + order.Username);
                }
                foreach (var customerUsername in customersUsername)
                {
                    if (!customers.ContainsKey(customerUsername))
                    { 
                        Customer customer = await userService.GetCustomer(customerUsername);
                        customers.Add(customerUsername,customer);
                    }
                }
                Console.WriteLine("Customers: " + customers.Count);
            }
            orders = ordersToGet;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

    }

    private double TotalPrice(List<OrderOffer> items)
    {
        double totalPrice = 0;
        for (int i = 0; i < items.Count; i++)
        {
            totalPrice += items[i].Quantity * items[i].Offer.Price;
        }

        return totalPrice;
    }
    
    private async Task DeleteOrder(int id)
    {
        await orderService.DeleteOrderAsync(id);
        await OnInitializedAsync();
    }

    private async Task CollectOrder(int id)
    {
        await orderService.CompleteOrderAsync(id);
        await OnInitializedAsync();
    }


}